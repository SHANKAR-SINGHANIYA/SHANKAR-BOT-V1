const axios = require("axios");

// рд▓рд┐рдВрдХ рдЪреЗрдХ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
function sahiUrlHai(url) {
  try {
    new URL(url);
    return true;
  } catch (e) {
    return false;
  }
}

module.exports.config = {
  name: 'down',
  version: "1.0.0",
  hasPermssion: 0,
  credits: "ЁЭРТЁЭРбЁЭРЪЁЭРзЁЭРдЁЭРЪЁЭРл ЁЭРТЁЭРвЁЭРзЁЭРаЁЭРбЁЭРЪЁЭРзЁЭРвЁЭР▓ЁЭРЪЁЯСС",
  description: "рд▓рд┐рдВрдХ рд╕реЗ рдлрд╛рдЗрд▓ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
  commandCategory: "рдЯреВрд▓реНрд╕",
  usages: "#down + рд▓рд┐рдВрдХ",
  cooldowns: 0,
  images: [],
};

module.exports.run = async function({ api, event, args }) {
  const downloadKaro = (url) => axios.get(url, { responseType: "stream" }).then((r) => r.data);

  // рдореИрд╕реЗрдЬ рдпрд╛ рд░рд┐рдкреНрд▓рд╛рдИ рд╕реЗ рд▓рд┐рдВрдХ рдирд┐рдХрд╛рд▓реЗрдВ
  const links = event.type === 'message_reply' 
    ? event.messageReply.body.split('\n') 
    : args.join(' ').split('\n');
  
  const sahiLinks = [];
  const galatLinks = [];
  const audioLinks = [];
  const videoLinks = [];
  const imageLinks = [];

  // рд╣рд░ рд▓рд┐рдВрдХ рдХреЛ рдЪреЗрдХ рдХрд░реЗрдВ
  links.forEach((link, index) => {
    if (!sahiUrlHai(link)) {
      galatLinks.push(index + 1);
    } else {
      sahiLinks.push(link);

      if (link.endsWith('.mp3')) audioLinks.push(link);
      else if (link.endsWith('.mp4')) videoLinks.push(link);
      else if (link.endsWith('.gif') || link.endsWith('.jpg') || link.endsWith('.jpeg') || link.endsWith('.png')) 
        imageLinks.push(link);
      else galatLinks.push(index + 1);
    }
  });

  // рдЧрд▓рдд рд▓рд┐рдВрдХ рдХреЗ рд▓рд┐рдП рдореИрд╕реЗрдЬ
  if (galatLinks.length > 0) {
    const errorMessage = `рдирд┐рдореНрди рд▓рд┐рдВрдХ рдЧрд▓рдд рд╣реИрдВ (${galatLinks.join(', ')}... рд╣рдЯрд╛ рджрд┐рдП рдЧрдП рд╣реИрдВред`;
    api.sendMessage({ body: errorMessage, attachment: [] }, event.threadID);
  }

  // рд╕рднреА рд▓рд┐рдВрдХреНрд╕ рдХреЛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ
  const downloadSab = async (links) => Promise.all(links.map(async link => await downloadKaro(link)));
  
  const [audioFiles, videoFiles, imageFiles] = await Promise.all([
    downloadSab(audioLinks),
    downloadSab(videoLinks),
    downloadSab(imageLinks)
  ]);

  const totalDownloads = audioFiles.filter(Boolean).length + videoFiles.filter(Boolean).length + imageFiles.filter(Boolean).length;

  // рдкреНрд░реЛрдЧреНрд░реЗрд╕ рдореИрд╕реЗрдЬ
  api.sendMessage({
    body: `рдбрд╛рдЙрдирд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ: ${totalDownloads} рдлрд╛рдЗрд▓...`,
    attachment: []
  }, event.threadID);

  // рдлрд╛рдЗрд▓реНрд╕ рдХреЛ рднреЗрдЬреЗрдВ
  const bhejoFiles = async (files, message) => {
    for (const file of files) {
      api.sendMessage({ body: message, attachment: [file] }, event.threadID);
    }
  };

  bhejoFiles(audioFiles, 'тЬЕ рдСрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рд╣реБрдЖ!');
  bhejoFiles(videoFiles, 'тЬЕ рд╡реАрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рд╣реБрдЖ!');
  
  if (imageFiles.length > 0) {
    let message = `тЬЕ ${imageFiles.length} рдЗрдореЗрдЬ/рдЧрд┐рдл рдбрд╛рдЙрдирд▓реЛрдб рд╣реБрдП!`;
    api.sendMessage({ body: message, attachment: imageFiles }, event.threadID);
  }
};
